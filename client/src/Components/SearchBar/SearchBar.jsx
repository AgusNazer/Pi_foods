import style from './SearchBar.module.css'
import * as actions from '../../Redux/actions';
import { useDispatch, useSelector} from "react-redux";
import { useState } from 'react';
// import Pagination from '../Pagination/Pagination';
import { NavLink } from 'react-router-dom';
// import { setError } from '../../Redux/actions';
// import { getRecipesByName } from '../../Redux/actions';


const SearchBar = () => {
    const dispatch = useDispatch();
    //error de busqueda
    const error = useSelector((state) => state.error);
    console.log(error);

    const [name, setName] = useState("");




    const handlerChange = (e) => {
        setName(e.target.value);
    }
    // cuando se env칤a el formulario de b칰squeda, la funci칩n
    //  handleSubmit se ejecuta. Verifica si se ha ingresado un 
    //  texto en el campo de b칰squeda y, si es as칤, env칤a una acci칩n
    //   a la tienda de Redux para filtrar las recetas seg칰n el nombre
    //    ingresado. Esto permite realizar b칰squedas y obtener resultados 
    //    filtrados basados en el nombre de la receta.
    const handleSubmit = (e) => {
        // e.preventDefault();
        console.log('Submitting search form');
      const trimmedName = name.trim();
      if (trimmedName === "") {
        // return; 
        alert('Por favor ingrese una receta valida')
      }else{
        dispatch(actions.getRecipesByName(trimmedName));
      }
      
      
    }
   


    const handleKeyPress = (e) => {
        if (e.key === "Enter") {
          handleSubmit();
        }  
    }    

    const handleHomeButtonClick = () => {
      dispatch(actions.getRecipes());
    };




    return (
      <div className={style.generalContainer}>
        
        <div className={style.encabezado}>
            <div className={style.homeButton}>
                <button className={style.recipes} onClick={handleHomeButtonClick}>游볭 Foodstation</button>
            </div>
        <div className={style.searchContainer}>
          <nav>
            <div className='searchContainer'>
            <input
              type="text"
              placeholder="Search a recipe..."
              onChange={handlerChange}
              onKeyPress={handleKeyPress}
              className={style.InputSearch} 
            />
            <button className={`${style.boton} ${style.searchButton}`} onClick={handleSubmit}>
              Search 游댍
            </button>
            <hr className={style.lineaHr} />
            </div>
          </nav>
        </div>
        <div className={style.createButton}>
            <NavLink to="/CreateRecipe">
              <button className={`${style.createRecipe} ${style.createButton}`}>Create Recipe</button>
            </NavLink>
        </div>
        </div>   
        <div>
        {/* {error && <p className={style.error}>{error}</p>} */}
        </div>
          <div className={style.pag}>
    
            {/* <Pagination /> */}
            <div>
        {error && <span className={style.error}>{error}</span>}
        <div>
        {/* {error} */}
      </div>
      </div>
          </div>
      </div>   
      );
    };



export default SearchBar














// Para mostrar el error al presionar el bot칩n de b칰squeda (Search), ya est치s en el camino correcto. El error se mostrar치 autom치ticamente en el componente SearchBar siempre que el estado error est칠 actualizado en el store de Redux.

// En tu c칩digo, la funci칩n handleSubmit se activa al hacer clic en el bot칩n "Search". En esa funci칩n, ya est치s llamando a la acci칩n getRecipesByName que est치 definida en tu archivo actions.js. Esta acci칩n es la encargada de realizar la b칰squeda y actualizar el estado error en Redux en caso de que ocurra un error.

// Cuando ocurra un error durante la b칰squeda, la acci칩n getRecipesByName utilizar치 dispatch(setError(error.message)); para enviar el mensaje de error al estado de Redux. El useSelector en tu componente SearchBar ya est치 configurado correctamente para obtener el estado error desde Redux: